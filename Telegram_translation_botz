from flask import Flask, Response
from telegram.ext import CommandHandler, Updater, MessageHandler, Filters
import requests
import json
import ast 

bot_token = '1231315957:AAG_sYHCOWxGPKpHxKtmr1iowV8zy2j8Lhs'

app = Flask(__name__)


def start(update, context):
    context.bot.send_message(chat_id=update.message.from_user.id, text="Hi! Welcome, lets translate some text")
    
def translate(update, context):
	# merging all the words passed from the user
    text = ' '.join(context.args)  # ['hello', 'world'] -> 'hello world'
    context.bot.send_message(chat_id=update.message.from_user.id, text="Translating '" + text + "'")
    
    #route to destination_langauge service
    url = 'http://127.0.0.1:5003/language'
    myobj = {
         'user_id': update.message.from_user.id
    }

    res = requests.get(url, params=myobj)    
    dest_lang = res.json()['retreived']
    
    # route to the translation service
    url = 'http://127.0.0.1:5002/translate'
    myobj = {
         'text': text,
         'dest_lang': dest_lang
    }

    res = requests.post(url, data=myobj)
    # read the json response
    translated = res.json()['response']
    context.bot.send_message(chat_id=update.message.from_user.id, text=translated)

def dest_language(update, context):
	# getting user prefered destination language
    lang = context.args[0]  # ['it'] -> 'it'
    
    # route to the language service
    url = 'http://127.0.0.1:5003/language'
    myobj = {
         'user_id': update.message.from_user.id,
         'dest_lang': lang
    }

    res = requests.post(url, data=myobj)
    context.bot.send_message(chat_id=update.message.from_user.id, text='Selected langauge: ' + lang)
    
def list_languages(update, context):
    dict_lang = {}
	# getting user prefered destination language
    languages = ' '.join(context.args)  # ['it'] -> 'it'
    
    # route to the language service
    url = 'http://127.0.0.1:5005/list'
    myobj = {
         'list_lang': languages
    }

    res = requests.get(url)
    languages = res.json()['retreived']
    print(type(languages))
    dict_lang = json.load(languages)
    #dict_lang = ast.literal_eval(languages) 
    print(type(dict_lang))
    
    for each in dict_lang['retreived'][0]['langauges']:
       a = each['language']
       b = each['code']
       print(a + ':' + b)
    
    context.bot.send_message(chat_id=update.message.from_user.id, text='Supported langauges: ' + a + ': ' + b)  
    #context.bot.send_message(chat_id=update.message.from_user.id, text='Supported langauges: ' + languages)  
    

def detect(update, context):
	# merging all the words passed from the user
    text = ' '.join(context.args)  # ['hello', 'world'] -> 'hello world'
    context.bot.send_message(chat_id=update.message.from_user.id, text="Detecting '" + text + "'")
    
    # route to the detect language service
    url = 'http://127.0.0.1:5004/detect'
    myobj = {
         'text': text
    }

    res = requests.post(url, data=myobj)
    # read the json response
    #res = json.loads(res)
    detected_language = res.text
    context.bot.send_message(chat_id=update.message.from_user.id, text=detected_language)
    

def init_bot():
    updater = Updater(token=bot_token, use_context=True)

    dispatcher = updater.dispatcher

    # let accept "/start" messages from the bot
    start_handler = CommandHandler('start', start)
    dispatcher.add_handler(start_handler)

    # let accept "/translate ..." from the bot
    translate_handler = CommandHandler('translate', translate)
    dispatcher.add_handler(translate_handler)
    
    # let accept "/dest_language ..." from the bot
    dest_lang_handler = CommandHandler('dest_language', dest_language)
    dispatcher.add_handler( dest_lang_handler)
      
    # let accept "/list_languages ..." from the bot
    list_handler = CommandHandler('list_languages', list_languages)
    dispatcher.add_handler(list_handler)
    
    # let accept "/list_languages ..." from the bot
    detect_handler = CommandHandler('detect', detect)
    dispatcher.add_handler(detect_handler)

    return updater
    
updater = init_bot()

@app.route('/start', methods=['GET', 'POST'])
def start():
	# start the telegram bot
	updater.start_polling()
	return Response('{"running":true}', status=200, mimetype='application/json')


if __name__ == '__main__':
    app.run(debug=True, port=5001)
